FROM debian:stretch
MAINTAINER Pyry Kontio <pyry.kontio@drasa.eu>
USER root

# NOTES TO MYSELF AND OTHERS TOO. THEY MIGHT BE HELPFUL,
# since this took me too long to figure out.

# This image is for building apps in Rust nightly for musl target.
# It contains the needed libraries to be able to build Diesel and Rocket.
# Setting up the build environment isn't actually easy at all â€“ because
# Diesel and Rocket use code-generating compiler plugins, they plugins
# must be able to run in the host environment, whereas we want the final build
# to be a statically linked musl build. So we need to set up the environment
# doubly and ensure that the libraries are compatible and the correct libraries
# are selected.

# This dockerfile is easy to build with associated build.sh script.
# While building, it assembles the build environment for compiling static musl binaries.
# The pain of static compiling is the native dependencies,
# but with correct configuration, it should be all right.
# You need to download the C libraries, build the sources with appropriate
# settings and check from the appropriate Rust crates (usually named something-sys)
# how they are going to present the linking flags to Cargo.
# Read the build.rs files of those crates. Usually you need to set some
# environment variables that affect how the build.rs build scripts work.

# Note: if build.rs doesn't provide options for static linking
# and/or cross-compiling, forking the crate, cargo-patching it
# and adding that functionality is a thing! It helps everyone.
# The build.rs scripts provide the linking flags to cargo by printing some
# instructions like `println!("cargo:rustc-link-lib=static={}", lib);`,
# where lib is the libname as passed to linker [pq, ssl, crypto etc.].)
# Remember to contribute to upstream too!

# Note about compiler plugins.
# The compiler plugins run in the HOST environment alongside the compiler,
# whereas the compiled binary is of the TARGET environment.
# In this image, HOST is x86_64-unknown-linux-musl
# and TARGET is x86_64-unknown-linux-gnu.
# Additionally compiler plugins are dynamically linked.
# This all means that you need to have installed both
# dynamically linked HOST libraries for compiler plugins
# and statically linked TARGET libraries for linking.

# Note about the OpenSSL version:
# The version is configurable. I tried using 1.1.0 briefly,
# but it introduced some problems with its stricter cert checking,
# so now the build.sh defaults to 1.0.2. This can be easily changed, however,
# and the build environment fully supports building 1.1.0.

# Note about the distro version:
# Debian Stretch (9) introduced GCC that defaults to position-independent code.
# The support for linking PIE code statically was added to Rust recently (2017-08-25).
# Before that it used to link the libraries statically, but still produce
# a dynamic looking executable (a binary with a reference to the dynamic loader),
# which partially defeats the purpose.
# No support is guaranteed for older Rust nightlies than that.

# USAGE:
# When run, this image compiles can be used to compile static musl builds,
# presenting the --target=x86_64-unknown-linux-musl flag to cargo. (-vv) is
# also recommended for debugging purposes, as static linking and
# cross-compiling builds break easily in my experience.
# It is recommended to mount not only the work directory, but also the
# `~/.cargo/git` and `~/.cargo/registry` directories as it enables better caching.

# Example of using the built container to build Rust executables:
# (from command line in the project directory)
#
# docker run -it --rm \
#    -v $PWD:/workdir \
#    -v ~/.cargo/git:/root/.cargo/git \
#    -v ~/.cargo/registry:/root/.cargo/registry \
#    golddranks/rust_musl_docker:nightly-2017-08-21 \
#    cargo build --release -vv --target=x86_64-unknown-linux-musl



# Installing packages - WHY THESE PACKAGES?
# musl itself:
#   musl-dev, musl-tools
# optional utilities for debugging inside the container:
#   file - for inspecting built files (whether they are actually static)
#   nano - a text editor
#   git - because basically every Rust project uses it
#   zlib1g-dev, cmake, libssl-dev - needed for building cargo-tree which helps visualizing the build deps
#   libssl-dev - needed for dynamically linking (for diesel code generation) the libpq crate
# needed utilities for downloading, installing and building everything
# (diesel, rocket and their dependencies, mainly libpq and openssl):
#   curl, g++, make, pkgconf - these are needed by many libraries
#   linux-headers-amd64 - needed for building openssl 1.1
#   ca-certificates - for openssl & curl.
#   xutils-dev because it contains makedepend with is used by openssl build system
#   libpq-dev - needed for dynamically linking (for diesel code generation) the libpq crate

RUN apt-get update && \
  apt-get install -y \
  musl-dev \
  musl-tools \
  file \
  nano \
  git \
  zlib1g-dev \
  cmake \
  make \
  g++ \
  curl \
  pkgconf \
  linux-headers-amd64 \
  ca-certificates \
  xutils-dev \
  libpq-dev \
  libssl-dev \ 
  --no-install-recommends && \
  rm -rf /var/lib/apt/lists/*

# Setting the musl prefix where the statically linked C libs are installed
# Setting the workdir for building the C libs (we will later set another one for the Rust project)
ENV MUSL_PREFIX=/musl
RUN mkdir /workdir && mkdir $MUSL_PREFIX
WORKDIR /libworkdir

# OpenSSL 1.1 needs some linux headers to exists. They aren't installed by
# default to the directory of musl includes, so we must link them.
# OpenSSL 1.0 doesn't need these, but they won't do any harm.
RUN ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm && \
    ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic && \
    ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux

# Let's download the libraries so we don't have to do this everytime when
# debugging failing builds.
RUN curl -sL http://www.openssl.org/source/OPENSSL_VER.tar.gz | tar xz && \
    curl -sL https://ftp.postgresql.org/pub/source/v9.6.4/postgresql-9.6.4.tar.gz | tar xz

# Note that since Debian Stretch, gcc builds position-independent executables.
# The compilation will fail without flags "-fPIE" (which is for the compiler)
# and "-pie" (which is for the linker).
# OpenSSL needs to be built with no-async because otherwise the build is going
# to crash with missing symbols. ZLib is disabled because we are too lazy to build
# a musl-compatible one by ourselves.
# Note that OpenSSL has their own build system, they don't use autotools.
# This makes the settings a bit non-standard.
RUN cd OPENSSL_VER && \
    CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=$MUSL_PREFIX --openssldir=$MUSL_PREFIX/ssl no-zlib linux-x86_64 && \
    make depend && make -j$(nproc) && make install

# Again, we use "-fPIE -pie".
# Readline and Zlib are disabled, because we are too lazy to build musl-compatible
# ones by ourselves.
RUN cd postgresql-9.6.4 && \
    CC="musl-gcc -fPIE -pie" ./configure --prefix=$MUSL_PREFIX --host=x86_64-unknown-linux-musl --without-readline --without-zlib && \
    make -j$(nproc) && make install

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain RUST_TOOLCHAIN

# .cargo/bin in PATH is needed for running cargo, rustup etc.
ENV PATH=/root/.cargo/bin:$PATH

# A tool for visualizing Rust build dependencies. Handy for debugging the build inside the container.
RUN cargo install cargo-tree

# Installing the musl target!
RUN rustup target add x86_64-unknown-linux-musl

# SETTING THE ENV VARS FOR MUSL BUILDS - WHY THESE?
# PKG_CONFIG_PATH Some of the build.rs script of *-sys crates use pkg-config to probe for libs.
# PKG_CONFIG_ALLOW_CROSS This tells the rust pkg-config crate to be enabled even when cross-compiling
# PKG_CONFIG_ALL_STATIC This tells the rust pkg-config crate to statically link the native dependencies
# The pq-sys crate doesn't use PKG_CONFIG, and we must manually pass PQ_LIB_STATIC for it to link statically.
# PATH /musl/bin is needed because the build.rs of pq-sys runs a postgres binary pg_config from there that tells it the lib dir.

ENV PATH=$MUSL_PREFIX/bin:$PATH \
    PKG_CONFIG_ALLOW_CROSS=true \
    PKG_CONFIG_ALL_STATIC=true \
    PKG_CONFIG_PATH=$MUSL_PREFIX/lib/pkgconfig \
    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=true \
    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=/usr/bin/pg_config \ 
    OPENSSL_STATIC=true \
    OPENSSL_DIR=$MUSL_PREFIX \
    SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt \
    SSL_CERT_DIR=/etc/ssl/certs
    
WORKDIR /workdir
